/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed by system behaviors/macros */
/* Include behaviour includes needed by key binds - automatically generated */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        stmhl: sticky_tap_momentary_hold_LAYER {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP_MOMENTARY_HOLD_LAYER";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        stmhk: sticky_tap_momentary_hold_key {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_TAP_MOMENTARY_HOLD_KEY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        stmhdes: sthmdes {
            compatible = "zmk,behavior-mod-morph";
            label = "sthmdes";
            #binding-cells = <0>;
            bindings = <&stmhk LEFT_SHIFT LEFT_SHIFT>, <&double_shift>;

            mods = <(MOD_LSFT)>;
        };

        stmhdec: stmhdec {
            compatible = "zmk,behavior-mod-morph";
            label = "STMHDEC";
            #binding-cells = <0>;
            bindings = <&stmhk LEFT_CONTROL LEFT_CONTROL>, <&double_control>;

            mods = <(MOD_LCTL)>;
        };

        stmhdea: stmhdea {
            compatible = "zmk,behavior-mod-morph";
            label = "STMHDEA";
            #binding-cells = <0>;
            bindings = <&stmhk LEFT_ALT LEFT_ALT>, <&double_alt>;

            mods = <(MOD_LALT)>;
        };

        tap_or_mo: tap_or_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_OR_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
        };

        hat_or_mo: hat_or_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HAT_OR_MO";
            bindings = <&mo>, <&da_hat>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        tap_or_mo_hold: tap_or_mo_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_OR_MO_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
        };

        hold_tap_comma_dot: hold_tap_comma_dot {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_COMMA_DOT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <61 60 42 30>;
        };

        hold_tap_xcv: hold_tap_xcv {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_XCV";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <48 50>;
        };

        sl_or_mo_hold: sl_or_mo_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "SL_OR_MO_HOLD";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
        };

        tap_or_mo_vim: tap_or_mo_vim {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_OR_MO_VIM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <36 37 38 25>;
        };

        caps_word_da_underscore: caps_word_da_underscore {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD_DA_UNDERSCORE";
            #binding-cells = <0>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z SQT LEFT_BRACKET SEMICOLON UNDERSCORE>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        double_shift: double_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp RIGHT_SHIFT>;
            label = "DOUBLE_SHIFT";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        double_control: double_control {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL &kp RIGHT_CONTROL>;
            label = "DOUBLE_CONTROL";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        double_alt: double_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp RIGHT_ALT>;
            label = "DOUBLE_ALT";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        da_grave: da_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(EQUAL) &kp SPACE>;
            label = "DA_GRAVE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        da_hat: da_hat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RBRC &kp SPACE>;
            label = "DA_HAT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        da_tilde: da_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RIGHT_BRACKET) &kp SPACE>;
            label = "DA_TILDE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        tap_and_mo: tap_and_mo {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_press>,
                <&macro_param_2to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_2to1 &mo MACRO_PLACEHOLDER>;

            label = "TAP_AND_MO";
        };

        brace_space: brace_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp ENTER &kp UP_ARROW &kp TAB>;
            label = "BRACE_SPACE";
        };

        mo_lshift_and_layer: mo_lshift_and_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &mo 1>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_SHIFT &mo 1>;

            label = "MO_LSHIFT_AND_LAYER";
        };

        mo_rshift_and_layer: mo_rshift_and_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RSHIFT &mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp RSHIFT &mo 2>;

            label = "MO_RSHIFT_AND_LAYER";
        };
    };

    combos {
        compatible = "zmk,combos";

        hrc-l-ctrl {
            bindings = <&stmhdec>;
            key-positions = <35 47>;
            slow-release;
        };

        hrc-l-shift {
            bindings = <&sl_or_mo_hold 1 1>;
            key-positions = <37 25>;
            slow-release;
            layers = <0>;
        };

        hrc-l-alt {
            bindings = <&stmhdea>;
            key-positions = <38 26>;
            slow-release;
        };

        hrc-r-ctrl {
            bindings = <&stmhdec>;
            key-positions = <62 44>;
            slow-release;
        };

        hrc-r-shift {
            bindings = <&sl_or_mo_hold 2 2>;
            key-positions = <42 30>;
            slow-release;
            layers = <0>;
        };

        hrc-r-alt {
            bindings = <&stmhdea>;
            key-positions = <41 29>;
            slow-release;
        };

        numbers_left {
            bindings = <&stmhl 6 6>;
            key-positions = <49 37>;
            slow-release;
        };

        number_right {
            bindings = <&stmhl 6 6>;
            key-positions = <60 42>;
            slow-release;
        };

        symbols_left_mid {
            bindings = <&stmhl 3 3>;
            key-positions = <48 36>;
            slow-release;
            layers = <0>;
        };

        symbols_right_mid {
            bindings = <&stmhl 3 3>;
            key-positions = <61 43>;
            slow-release;
            layers = <0>;
        };

        ctrl_c {
            bindings = <&tap_or_mo 6 LC(C)>;
            key-positions = <48 49>;
            slow-release;
        };

        ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <50 49>;
        };

        ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <66 67>;
        };

        ctrl_a {
            bindings = <&kp LC(A)>;
            key-positions = <36 38>;
        };

        ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <50 48>;
        };

        ctrl_d {
            bindings = <&kp LC(D)>;
            key-positions = <39 36>;
        };

        ctrl_w {
            bindings = <&kp LC(W)>;
            key-positions = <25 24>;
        };

        ctrl_r {
            bindings = <&kp LC(R)>;
            key-positions = <25 26>;
        };

        ctrl_t {
            bindings = <&kp LC(T)>;
            key-positions = <25 27>;
        };

        ctrl_o {
            bindings = <&kp LC(O)>;
            key-positions = <39 37>;
        };

        ctrl_f {
            bindings = <&kp LC(F)>;
            key-positions = <25 38>;
        };

        shift_tab_macro {
            bindings = <&tap_and_mo LS(TAB) 7>;
            key-positions = <37 36>;
            slow-release;
        };

        d_f_tab {
            bindings = <&tap_and_mo TAB 7>;
            key-positions = <37 38>;
            slow-release;
        };

        backslash {
            bindings = <&tap_or_mo 11 RA(NON_US_BSLH)>;
            key-positions = <76 77>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <41 42>;
        };

        sqt_and_parens {
            bindings = <&tap_or_mo 8 BACKSLASH>;
            key-positions = <43 42>;
        };

        dqt_and_braces {
            bindings = <&tap_or_mo 10 LS(NUMBER_2)>;
            key-positions = <31 30>;
        };

        equals {
            bindings = <&kp RS(N0)>;
            key-positions = <59 42>;
        };

        at {
            bindings = <&kp RA(NUMBER_2)>;
            key-positions = <29 30>;
        };

        qmark {
            bindings = <&kp UNDERSCORE>;
            key-positions = <41 30>;
        };

        plus {
            bindings = <&kp MINUS>;
            key-positions = <76 75>;
        };

        k_comma_dash {
            bindings = <&kp FSLH>;
            key-positions = <59 60>;
        };

        excl_and_brackets {
            bindings = <&tap_or_mo 9 LS(NUMBER_1)>;
            key-positions = <61 60>;
        };

        m_dot_underscore {
            bindings = <&kp RS(FSLH)>;
            key-positions = <59 61>;
        };

        hat {
            bindings = <&da_hat>;
            key-positions = <60 75>;
            slow-release;
        };

        colon {
            bindings = <&kp RS(DOT)>;
            key-positions = <37 50>;
        };

        lshift_ctrl_k {
            bindings = <&kp LC(K)>;
            key-positions = <25 37>;
            layers = <1>;
        };

        rshift_ctrl_dash {
            bindings = <&kp LC(SLASH)>;
            key-positions = <30 42>;
            layers = <2>;
        };

        double_left_caps_word {
            bindings = <&caps_word_da_underscore>;
            key-positions = <25 37>;
            layers = <2>;
        };

        double_right_caps_lock {
            bindings = <&caps_word_da_underscore>;
            key-positions = <42 30>;
            layers = <1>;
        };

        caps_lock {
            bindings = <&kp CLCK>;
            key-positions = <25 37 30 42>;
        };

        excl {
            bindings = <&kp LS(NUMBER_1)>;
            key-positions = <30 43>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1      &kp F2                    &kp F3        &kp F4              &kp F5                                                                                                        &kp F6    &kp F7                        &kp F8                      &kp F9         &kp F10
&kp GRAVE   &caps_word_da_underscore  &kp NUMBER_2  &kp N3              &kp N4   &kp N5                                                                                       &kp N6  &kp N7    &kp N8                        &kp N9                      &kp SLASH      &kp EQUAL
&kp F11     &kp NUMBER_1              &kp W         &kp E               &kp R    &kp T                                                                                        &kp Y   &kp U     &kp I                         &kp O                       &kp N0         &kp LEFT_BRACKET
&kp ESCAPE  &tap_or_mo_vim 15 Q       &kp S         &kp D               &kp F    &kp G                                                                                        &kp H   &kp J     &kp K                         &kp L                       &kp P          &kp SQT
&kp TAB     &kp A                     &kp X         &hold_tap_xcv 11 C  &kp V    &kp B   &kp LEFT_ALT  &kp DELETE  &to 5          &kp RIGHT_ALT  &kp RCTRL   &kp RIGHT_SHIFT  &kp N   &kp M     &hold_tap_comma_dot 14 COMMA  &hold_tap_comma_dot 14 DOT  &kp LS(COMMA)  &kp SEMI
&magic 4 0  &kp Z                     &kp LS(DOT)   &kp HOME            &kp END          &kp SPACE     &kp ENTER   &kp LG(SPACE)  &kp LGUI       &kp DELETE  &kp BSPC                 &kp LEFT  &kp DOWN                      &kp UP                      &kp RIGHT      &kp F12
            >;
        };

        left_shift {
            bindings = <
&kp LS(F1)      &kp LS(F2)  &kp LS(F3)  &kp LS(F4)    &kp LS(F5)                                                                                                                         &kp LS(F6)    &kp LS(F7)     &kp LS(F8)   &kp LS(F9)     &kp LS(F10)
&kp LS(GRAVE)   &trans      &kp LS(N2)  &kp LS(N3)    &kp LS(N4)   &kp LS(N5)                                                                                                &kp LS(N6)  &kp LS(N7)    &kp LS(N8)     &kp LS(N9)   &kp LS(MINUS)  &kp EQUAL
&kp LS(F11)     &kp LS(N1)  &kp LS(W)   &kp LS(E)     &kp LS(R)    &kp LS(T)                                                                                                 &kp LS(Y)   &kp LS(U)     &kp LS(I)      &kp LS(O)    &kp LS(N0)     &kp LS(LEFT_BRACKET)
&kp LS(ESCAPE)  &kp LS(Q)   &kp LS(S)   &kp LS(D)     &kp LS(F)    &kp LS(G)                                                                                                 &kp LS(H)   &kp LS(J)     &kp LS(K)      &kp LS(L)    &kp LS(P)      &kp LS(APOS)
&kp LS(TAB)     &kp LS(A)   &kp LS(X)   &kp LS(C)     &kp LS(V)    &kp LS(B)   &kp LS(LEFT_ALT)  &kp LS(DEL)    &trans  &kp LS(RALT)       &kp LS(RCTRL)  &trans             &kp LS(N)   &kp LS(M)     &kp LS(COMMA)  &kp LS(DOT)  &kp COMMA      &kp LS(SEMI)
&trans          &kp LS(Z)   &kp DOT     &kp LS(HOME)  &kp LS(END)              &kp LS(SPACE)     &kp LS(ENTER)  &trans  &kp LS(RIGHT_WIN)  &kp LS(DEL)    &kp LS(BACKSPACE)              &kp LS(LEFT)  &kp LS(DOWN)   &kp LS(UP)   &kp LS(RIGHT)  &kp LS(F12)
            >;
        };

        right_shift {
            bindings = <
&kp RS(F1)      &kp RS(F2)  &kp RS(F3)  &kp RS(F4)    &kp RS(F5)                                                                                                                         &kp RS(F6)    &kp RS(F7)     &kp RS(F8)   &kp RS(F9)     &kp RS(F10)
&kp RS(GRAVE)   &trans      &kp RS(N2)  &kp RS(N3)    &kp RS(N4)   &kp RS(N5)                                                                                                &kp RS(N6)  &kp RS(N7)    &kp RS(N8)     &kp RS(N9)   &kp RS(MINUS)  &kp EQUAL
&kp RS(F11)     &kp RS(N1)  &kp RS(W)   &kp RS(E)     &kp RS(R)    &kp RS(T)                                                                                                 &kp RS(Y)   &kp RS(U)     &kp RS(I)      &kp RS(O)    &kp RS(N0)     &kp RS(LEFT_BRACKET)
&kp RS(ESCAPE)  &kp RS(Q)   &kp RS(S)   &kp RS(D)     &kp RS(F)    &kp RS(G)                                                                                                 &kp RS(H)   &kp RS(J)     &kp RS(K)      &kp RS(L)    &kp RS(P)      &kp RS(APOS)
&kp RS(TAB)     &kp RS(A)   &kp RS(X)   &kp RS(C)     &kp RS(V)    &kp RS(B)   &kp RS(LEFT_ALT)  &kp RS(DEL)    &trans  &kp RS(RALT)       &kp RS(RCTRL)  &trans             &kp RS(N)   &kp RS(M)     &kp RS(COMMA)  &kp RS(DOT)  &kp COMMA      &kp RS(SEMI)
&trans          &kp RS(Z)   &kp DOT     &kp RS(HOME)  &kp RS(END)              &kp RS(SPACE)     &kp RS(ENTER)  &trans  &kp RS(RIGHT_WIN)  &kp RS(DEL)    &kp RS(BACKSPACE)              &kp RS(LEFT)  &kp RS(DOWN)   &kp RS(UP)   &kp RS(RIGHT)  &kp RS(F12)
            >;
        };

        layer_symbols {
            bindings = <
&trans  &trans      &trans      &trans                    &trans                                                                                                        &trans          &trans            &trans       &trans      &trans
&trans  &trans      &trans      &trans                    &trans        &trans                                                                    &trans                &trans          &trans            &trans       &trans      &trans
&trans  &trans      &trans      &kp BACKSLASH             &kp EXCL      &kp RA(EQUAL)                                                             &kp RS(NUMBER_6)      &kp UNDERSCORE  &kp LS(NUMBER_2)  &trans       &trans      &trans
&trans  &kp RA(N2)  &kp RA(N4)  &kp LS(NUMBER_8)          &kp RA(N8)    &kp RA(NUMBER_7)                                                          &kp RA(N0)            &kp RA(N9)      &kp RS(NUMBER_9)  &kp PERCENT  &kp HASH    &trans
&trans  &kp MINUS   &kp PIPE    &kp RA(NON_US_BACKSLASH)  &kp QUESTION  &kp LS(NON_US_BACKSLASH)  &mo 3   &trans  &trans  &trans  &trans  &mo 3   &kp NON_US_BACKSLASH  &kp FSLH        &kp RS(N7)        &da_hat      &kp RS(N0)  &trans
&trans  &trans      &trans      &trans                    &da_grave                               &trans  &trans  &trans  &trans  &trans  &trans                        &da_tilde       &kp PAGE_DOWN     &kp PAGE_UP  &trans      &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_Game {
            bindings = <
&kp F1        &kp F2     &kp F3  &kp F4  &kp F5                                                                        &trans  &trans  &trans  &trans  &trans
&kp N8        &kp N5     &kp N1  &kp N2  &kp N3  &kp N4                                                        &trans  &trans  &trans  &trans  &trans  &trans
&kp N7        &kp ESC    &kp Q   &kp W   &kp E   &kp R                                                         &trans  &trans  &trans  &trans  &trans  &trans
&kp N6        &kp TAB    &kp A   &kp S   &kp D   &kp F                                                         &trans  &trans  &trans  &trans  &trans  &trans
&kp KP_PLUS   &kp LSHFT  &kp Z   &kp X   &kp C   &kp V   &kp Y      &kp H     &to 0    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp KP_SLASH  &kp LCTRL  &kp T   &kp G   &kp B           &kp SPACE  &kp LALT  &kp RET  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_numbers {
            bindings = <
&trans  &trans  &trans          &trans  &trans                                                                                    &trans        &trans  &trans         &trans  &trans
&trans  &trans  &trans          &trans  &trans        &trans                                                        &trans        &trans        &trans  &trans         &trans  &trans
&trans  &trans  &trans          &trans  &trans        &trans                                                        &trans        &trans        &trans  &trans         &trans  &trans
&trans  &trans  &kp LEFT_SHIFT  &trans  &kp N3        &kp NUMBER_4                                                  &kp NUMBER_9  &kp N8        &trans  &kp RSHIFT     &trans  &trans
&trans  &trans  &kp LEFT_ALT    &trans  &kp NUMBER_1  &kp NUMBER_2  &trans  &trans  &trans  &trans  &trans  &trans  &kp N7        &kp NUMBER_6  &trans  &kp RIGHT_ALT  &trans  &trans
&trans  &trans  &trans          &trans  &kp N0                      &trans  &trans  &trans  &trans  &trans  &trans                &kp N5        &trans  &trans         &trans  &trans
            >;
        };

        layer_tab_f {
            bindings = <
&trans  &trans  &trans       &trans  &trans                                                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)  &trans  &kp TAB  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans  &trans           &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        parentheses {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &brace_space  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp RS(N8)    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(N9)    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &kp LEFT      &trans  &trans  &trans  &trans
            >;
        };

        brackets {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &brace_space  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp RA(N8)    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp RA(N9)    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &kp LEFT      &trans  &trans  &trans  &trans
            >;
        };

        braces {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans        &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp RA(N7)    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp RA(N0)    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT      &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &brace_space  &trans  &trans  &trans  &trans
            >;
        };

        greater_less_than {
            bindings = <
&trans  &trans  &trans           &trans  &trans                                                                               &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans           &trans  &trans               &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans           &trans  &trans               &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans           &trans  &trans               &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NON_US_BSLH  &trans  &kp LS(NON_US_BSLH)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans           &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        pipe_symbs {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &da_grave  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp HASH   &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp PIPE   &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans     &trans  &trans  &trans  &trans
            >;
        };

        amp_symbs {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans            &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans            &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &da_tilde         &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &kp PERCENT       &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp RA(NUMBER_4)  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans            &trans  &trans  &trans  &trans
            >;
        };

        slashes {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans                        &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans                        &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &tap_or_mo 13 RS(NUMBER_6)    &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &tap_or_mo_hold 12 RA(EQUAL)  &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &tap_or_mo 9 RA(NON_US_BSLH)  &kp RS(N7)  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans                        &trans      &trans  &trans
            >;
        };

        vim_leader {
            bindings = <
&trans  &trans  &trans       &trans            &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans            &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &kp LS(NUMBER_1)  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp RS(DOT)  &kp W             &kp Q   &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
