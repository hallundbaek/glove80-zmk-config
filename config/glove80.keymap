/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>

/* Include all behaviour includes needed by system behaviors/macros */
/* Include behaviour includes needed by key binds - automatically generated */

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Game 3

/* Custom Defined Behaviors */

/ {
};

/* Automatically generated keymap */

/ {
    combos {
        compatible = "zmk,combos";

        hrc-l-ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <36 48>;
            slow-release;
            timeout-ms = <80>;
        };

        hrc-l-shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <37 25>;
            slow-release;
            timeout-ms = <80>;
        };

        hrc-l-alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <38 26>;
            slow-release;
            timeout-ms = <80>;
        };

        hrc-r-ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <43 61>;
            slow-release;
            timeout-ms = <80>;
        };

        hrc-r-shift {
            bindings = <&kp RSHFT>;
            key-positions = <42 30>;
            slow-release;
            timeout-ms = <80>;
        };

        hrc-r-alt {
            bindings = <&kp RALT>;
            key-positions = <41 29>;
            slow-release;
            timeout-ms = <80>;
        };

        symbols_left {
            bindings = <&mo 1>;
            key-positions = <47 35>;
            slow-release;
            timeout-ms = <80>;
        };

        symbols_right {
            bindings = <&mo 1>;
            key-positions = <62 44>;
            slow-release;
            timeout-ms = <80>;
        };

        numbers_left {
            bindings = <&mo 6>;
            key-positions = <67 49>;
            slow-release;
            timeout-ms = <80>;
        };

        number_right {
            bindings = <&mo 6>;
            key-positions = <76 60>;
            slow-release;
            timeout-ms = <80>;
        };

        function_left {
            bindings = <&mo 5>;
            key-positions = <23 35>;
            slow-release;
            timeout-ms = <80>;
        };

        function_right {
            bindings = <&mo 4>;
            key-positions = <44 32>;
            slow-release;
            timeout-ms = <80>;
        };

        symbols_left_mid {
            bindings = <&mo 1>;
            key-positions = <49 37>;
            timeout-ms = <80>;
            slow-release;
        };

        symbols_right_mid {
            bindings = <&mo 1>;
            key-positions = <60 42>;
            timeout-ms = <80>;
            slow-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4    &kp F5                                                                                                   &kp F6    &kp F7     &kp F8   &kp F9         &kp F10
&kp GRAVE   &caps_word    &kp NUMBER_2  &kp N3    &kp N4   &kp N5                                                                                  &kp N6  &kp N7    &kp N8     &kp N9   &kp SLASH      &kp EQUAL
&kp F11     &kp NUMBER_1  &kp W         &kp E     &kp R    &kp T                                                                                   &kp Y   &kp U     &kp I      &kp O    &kp N0         &kp MINUS
&kp ESCAPE  &kp Q         &kp S         &kp D     &kp F    &kp G                                                                                   &kp H   &kp J     &kp K      &kp L    &kp P          &kp LEFT_BRACKET
&kp TAB     &kp A         &kp X         &kp C     &kp V    &kp B   &kp LEFT_ALT  &kp DELETE  &to 3          &to 6     &kp RCTRL   &kp RIGHT_SHIFT  &kp N   &kp M     &kp COMMA  &kp DOT  &kp SEMICOLON  &kp SQT
&magic 2 0  &kp Z         &kp COLON     &kp HOME  &kp END          &kp SPACE     &kp ENTER   &kp LG(SPACE)  &kp LGUI  &kp DELETE  &kp BSPC                 &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT      &kp F12
            >;
        };

        layer_symbols {
            bindings = <
&trans  &trans    &trans         &trans        &trans                                                                                                 &trans                 &trans       &trans             &trans       &trans
&trans  &trans    &trans         &trans        &trans                &trans                                                            &trans         &trans                 &trans       &trans             &trans       &trans
&trans  &trans    &trans         &kp GRAVE     &kp LBRC              &kp AMPERSAND                                                     &kp PIPE       &kp RBRC               &kp TILDE    &trans             &trans       &trans
&trans  &kp PLUS  &kp SQT        &kp DOLLAR    &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET                                                  &kp RBKT       &kp RIGHT_PARENTHESIS  &kp PERCENT  &kp DOUBLE_QUOTES  &kp EQUAL    &trans
&trans  &kp AT    &kp BACKSLASH  &kp ASTERISK  &kp UNDERSCORE        &kp GREATER_THAN  &mo 1   &trans  &trans  &trans  &trans  &mo 1   &kp LESS_THAN  &kp MINUS              &kp CARET    &kp SLASH          &kp HASH     &trans
&trans  &trans    &trans         &trans        &kp EXCLAMATION                         &trans  &trans  &trans  &trans  &trans  &trans                 &kp QUESTION           &trans       &kp PAGE_DOWN      &kp PAGE_UP  &trans
            >;
        };

        layer_Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_Game {
            bindings = <
&kp F1        &kp F2     &kp F3  &kp F4  &kp F5                                                                        &trans  &trans  &trans  &trans  &trans
&kp N8        &kp N5     &kp N1  &kp N2  &kp N3  &kp N4                                                        &trans  &trans  &trans  &trans  &trans  &trans
&kp N7        &kp ESC    &kp Q   &kp W   &kp E   &kp R                                                         &trans  &trans  &trans  &trans  &trans  &trans
&kp N6        &kp TAB    &kp A   &kp S   &kp D   &kp F                                                         &trans  &trans  &trans  &trans  &trans  &trans
&kp KP_PLUS   &kp LSHFT  &kp Z   &kp X   &kp C   &kp V   &kp Y      &kp H     &to 0    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp KP_SLASH  &kp LCTRL  &kp T   &kp G   &kp B           &kp SPACE  &kp LALT  &kp RET  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_function_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans   &trans   &trans   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp F5  &kp F6   &kp F7   &kp F8   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans   &trans   &trans   &trans  &trans
            >;
        };

        layer_function_left {
            bindings = <
&trans  &trans  &trans  &trans   &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F9  &kp F10  &kp F11  &kp F12                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F5  &kp F6   &kp F7   &kp F8                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2   &kp F3   &kp F4                                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans            &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_numbers {
            bindings = <
&trans  &trans          &trans     &trans  &trans                                                                        &trans  &trans  &trans         &trans           &trans
&trans  &trans          &trans     &trans  &trans  &trans                                                        &trans  &trans  &trans  &trans         &trans           &trans
&trans  &trans          &trans     &trans  &trans  &trans                                                        &trans  &trans  &trans  &trans         &trans           &trans
&trans  &trans          &kp ASTRK  &trans  &kp N3  &kp NUMBER_4                                                  &kp N9  &kp N8  &trans  &kp KP_DIVIDE  &trans           &trans
&trans  &kp KP_PLUS     &kp EQUAL  &trans  &kp N1  &kp NUMBER_2  &trans  &trans  &trans  &to 0   &trans  &trans  &kp N7  &kp N6  &trans  &trans         &kp MINUS        &trans
&trans  &kp LEFT_SHIFT  &kp LALT   &trans  &kp N0                &trans  &trans  &trans  &trans  &trans  &trans          &kp N5  &trans  &kp RALT       &kp RIGHT_SHIFT  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };
};
